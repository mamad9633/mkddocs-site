{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Data Structures Documentation","text":"<p>This documentation provides an overview of various data structures implemented in this project. You will find detailed explanations, usage examples, and visualizations for each data structure.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Data Structures: Explore different data structures such as Arrays, Linked Lists, Queues, Stacks, and Trees.</li> <li>Examples: Access practical examples and visualizations to better understand how each data structure works.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, navigate through the sections using the menu on the left. Each section provides comprehensive details and examples to help you understand and implement these data structures in your projects.</p>"},{"location":"#about","title":"About","text":"<p>This project aims to provide clear and concise documentation for data structures, making it easier for developers to learn and apply these concepts in their work.</p>"},{"location":"__init__/","title":"init","text":"In\u00a0[\u00a0]: Copied! <pre>from .array import Array\nfrom .linkedlist import LinkedList\nfrom .queue import Queue\nfrom .stack import Stack\nfrom .tree import BinarySearchTree\n</pre> from .array import Array from .linkedlist import LinkedList from .queue import Queue from .stack import Stack from .tree import BinarySearchTree In\u00a0[\u00a0]: Copied! <pre>__all__ = ['Array', 'LinkedList', 'Queue', 'Stack', 'BinarySearchTree']\n</pre> __all__ = ['Array', 'LinkedList', 'Queue', 'Stack', 'BinarySearchTree']"},{"location":"array/","title":"Array","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Any, Optional\nimport matplotlib.pyplot as plt\nimport numpy as np\n</pre> from typing import Any, Optional import matplotlib.pyplot as plt import numpy as np In\u00a0[\u00a0]: Copied! <pre>class Array:\n    \"\"\"Array implementation with visualization capabilities.\"\"\"\n    \n    def __init__(self) -&gt; None:\n        self.array: list = []\n\n    def insert(self, item: Any) -&gt; None:\n        self.array.append(item)\n\n    def delete(self, index: int) -&gt; Any:\n        if 0 &lt;= index &lt; len(self.array):\n            return self.array.pop(index)\n        raise IndexError(\"Index out of range\")\n\n    def search(self, item: Any) -&gt; int:\n        for i in range(len(self.array)):\n            if self.array[i] == item:\n                return i\n        return -1\n\n    def get(self, index: int) -&gt; Any:\n        if 0 &lt;= index &lt; len(self.array):\n            return self.array[index]\n        raise IndexError(\"Index out of range\")\n\n    def length(self) -&gt; int:\n        return len(self.array)\n\n    def display(self) -&gt; None:\n        print(self.array)\n\n    def visualize(self) -&gt; None:\n        \"\"\"Visualize array elements.\"\"\"\n        plt.figure(figsize=(10, 2))\n        plt.bar(range(len(self.array)), self.array)\n        plt.title(\"Array Visualization\")\n        plt.xlabel(\"Index\")\n        plt.ylabel(\"Value\")\n        plt.show()\n</pre> class Array:     \"\"\"Array implementation with visualization capabilities.\"\"\"          def __init__(self) -&gt; None:         self.array: list = []      def insert(self, item: Any) -&gt; None:         self.array.append(item)      def delete(self, index: int) -&gt; Any:         if 0 &lt;= index &lt; len(self.array):             return self.array.pop(index)         raise IndexError(\"Index out of range\")      def search(self, item: Any) -&gt; int:         for i in range(len(self.array)):             if self.array[i] == item:                 return i         return -1      def get(self, index: int) -&gt; Any:         if 0 &lt;= index &lt; len(self.array):             return self.array[index]         raise IndexError(\"Index out of range\")      def length(self) -&gt; int:         return len(self.array)      def display(self) -&gt; None:         print(self.array)      def visualize(self) -&gt; None:         \"\"\"Visualize array elements.\"\"\"         plt.figure(figsize=(10, 2))         plt.bar(range(len(self.array)), self.array)         plt.title(\"Array Visualization\")         plt.xlabel(\"Index\")         plt.ylabel(\"Value\")         plt.show()"},{"location":"linkedlist/","title":"Linkedlist","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Any, Optional\nimport networkx as nx\nimport matplotlib.pyplot as plt\n</pre> from typing import Any, Optional import networkx as nx import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>class Node:\n    \"\"\"Node for LinkedList.\"\"\"\n    def __init__(self, data: Any):\n        self.data: Any = data\n        self.next: Optional['Node'] = None\n</pre> class Node:     \"\"\"Node for LinkedList.\"\"\"     def __init__(self, data: Any):         self.data: Any = data         self.next: Optional['Node'] = None In\u00a0[\u00a0]: Copied! <pre>class LinkedList:\n    \"\"\"LinkedList implementation with visualization.\"\"\"\n    def __init__(self):\n        self.head: Optional[Node] = None\n\n    def insertAtBeginning(self, item): \n        # Your implementation is correct, no changes needed\n        if self.head:\n          new = Node(item)\n          new.next = self.head\n          self.head = new\n        else:\n          self.head = Node(item)\n\n    def insertAfter(self, item, index):\n        if not self.head:\n            print('List is empty')\n            return\n        \n        i = 1\n        node = Node(item)\n        temp = self.head\n        while i &lt; index and temp.next!=None:\n          i = i+1\n          temp = temp.next\n        if i == index:\n          node.next= temp.next\n          temp.next = node\n        else:\n          print('This index does not exist in the linked list')\n\n    def insertAtEnd(self, item):\n         new_node = Node(item)\n         if not self.head:\n             self.head = new_node\n             return\n         \n         current = self.head\n         while current.next:\n             current = current.next\n         current.next = new_node\n\n    def deleteItem(self, index):\n        if self.head is None:\n            print('List is empty')\n            return\n        \n        if index == 0:\n            self.head = self.head.next\n            return\n        \n        curr_node = self.head\n        prev = None\n        count = 0\n        \n        # Traverse until we find the index or reach end\n        while curr_node is not None and count &lt; index:\n            prev = curr_node\n            curr_node = curr_node.next\n            count += 1\n        \n        # Check if index was found\n        if curr_node is None:\n            print('Index out of range')\n            return\n        \n        # Update the links to skip the deleted node\n        if prev is not None:\n            prev.next = curr_node.next\n\n    def search(self, item):\n        current = self.head\n        while current:\n            if current.data == item:\n                return True\n            current = current.next\n        return False\n\n    def traverse(self):\n        current = self.head\n        if not current:\n            print(\"List is empty\")\n            return\n        while current:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n        print(\"None\")\n\n    def visualize(self) -&gt; None:\n        \"\"\"Visualize the linked list.\"\"\"\n        G = nx.DiGraph()\n        current = self.head\n        prev_node = None\n        \n        while current:\n            G.add_node(id(current), value=current.data)\n            if prev_node:\n                G.add_edge(id(prev_node), id(current))\n            prev_node = current\n            current = current.next\n\n        plt.figure(figsize=(12, 3))\n        pos = nx.spring_layout(G)\n        nx.draw(G, pos, with_labels=True, node_color='lightblue', \n                node_size=1500, arrows=True)\n        \n        labels = {node: f\"{G.nodes[node]['value']}\" for node in G.nodes()}\n        nx.draw_networkx_labels(G, pos, labels)\n        \n        plt.title(\"Linked List Visualization\")\n        plt.show()\n</pre> class LinkedList:     \"\"\"LinkedList implementation with visualization.\"\"\"     def __init__(self):         self.head: Optional[Node] = None      def insertAtBeginning(self, item):          # Your implementation is correct, no changes needed         if self.head:           new = Node(item)           new.next = self.head           self.head = new         else:           self.head = Node(item)      def insertAfter(self, item, index):         if not self.head:             print('List is empty')             return                  i = 1         node = Node(item)         temp = self.head         while i &lt; index and temp.next!=None:           i = i+1           temp = temp.next         if i == index:           node.next= temp.next           temp.next = node         else:           print('This index does not exist in the linked list')      def insertAtEnd(self, item):          new_node = Node(item)          if not self.head:              self.head = new_node              return                    current = self.head          while current.next:              current = current.next          current.next = new_node      def deleteItem(self, index):         if self.head is None:             print('List is empty')             return                  if index == 0:             self.head = self.head.next             return                  curr_node = self.head         prev = None         count = 0                  # Traverse until we find the index or reach end         while curr_node is not None and count &lt; index:             prev = curr_node             curr_node = curr_node.next             count += 1                  # Check if index was found         if curr_node is None:             print('Index out of range')             return                  # Update the links to skip the deleted node         if prev is not None:             prev.next = curr_node.next      def search(self, item):         current = self.head         while current:             if current.data == item:                 return True             current = current.next         return False      def traverse(self):         current = self.head         if not current:             print(\"List is empty\")             return         while current:             print(current.data, end=\" -&gt; \")             current = current.next         print(\"None\")      def visualize(self) -&gt; None:         \"\"\"Visualize the linked list.\"\"\"         G = nx.DiGraph()         current = self.head         prev_node = None                  while current:             G.add_node(id(current), value=current.data)             if prev_node:                 G.add_edge(id(prev_node), id(current))             prev_node = current             current = current.next          plt.figure(figsize=(12, 3))         pos = nx.spring_layout(G)         nx.draw(G, pos, with_labels=True, node_color='lightblue',                  node_size=1500, arrows=True)                  labels = {node: f\"{G.nodes[node]['value']}\" for node in G.nodes()}         nx.draw_networkx_labels(G, pos, labels)                  plt.title(\"Linked List Visualization\")         plt.show()"},{"location":"queue/","title":"Queue","text":"In\u00a0[\u00a0]: Copied! <pre>class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):  # Renamed from is_empty to isEmpty\n        return len(self.items) == 0\n    \n    def enqueue(self, item):\n        self.items.append(item)\n    \n    def dequeue(self):\n        if not self.isEmpty():\n            return self.items.pop(0)\n        raise IndexError(\"Queue is empty\")\n    \n    def peek(self):\n        if not self.isEmpty():\n            return self.items[0]\n        raise IndexError(\"Queue is empty\")\n    \n    def visualize(self):\n        import matplotlib.pyplot as plt\n        plt.figure(figsize=(10, 5))\n        plt.bar(range(len(self.items)), self.items)\n        plt.title('Queue Visualization')\n        plt.xlabel('Position')\n        plt.ylabel('Value')\n        plt.show()\n</pre> class Queue:     def __init__(self):         self.items = []          def isEmpty(self):  # Renamed from is_empty to isEmpty         return len(self.items) == 0          def enqueue(self, item):         self.items.append(item)          def dequeue(self):         if not self.isEmpty():             return self.items.pop(0)         raise IndexError(\"Queue is empty\")          def peek(self):         if not self.isEmpty():             return self.items[0]         raise IndexError(\"Queue is empty\")          def visualize(self):         import matplotlib.pyplot as plt         plt.figure(figsize=(10, 5))         plt.bar(range(len(self.items)), self.items)         plt.title('Queue Visualization')         plt.xlabel('Position')         plt.ylabel('Value')         plt.show()"},{"location":"setup/","title":"Setup","text":"In\u00a0[\u00a0]: Copied! <pre>from setuptools import setup, find_packages\n</pre> from setuptools import setup, find_packages In\u00a0[\u00a0]: Copied! <pre>setup(\n    name=\"data-structures-package\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    description=\"A collection of data structure implementations\",\n    author=\"Elhadji Mamadou\",\n    author_email=\"your.email@example.com\",\n    python_requires=\"&gt;=3.6\",\n)\n</pre> setup(     name=\"data-structures-package\",     version=\"0.1.0\",     packages=find_packages(),     description=\"A collection of data structure implementations\",     author=\"Elhadji Mamadou\",     author_email=\"your.email@example.com\",     python_requires=\"&gt;=3.6\", )"},{"location":"stack/","title":"Stack","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Any, List\nimport matplotlib.pyplot as plt\nimport numpy as np\n</pre> from typing import Any, List import matplotlib.pyplot as plt import numpy as np In\u00a0[\u00a0]: Copied! <pre>class Stack:\n    def __init__(self, para: List = None):\n        self.stack: List = para if para is not None else []\n\n    def push(self, newElement: Any) -&gt; None:\n        self.stack.append(newElement)\n\n    def pop(self) -&gt; Any:\n        if not self.is_empty():\n            last_element = self.stack[len(self.stack)-1]\n            self.stack.remove(last_element)\n            return last_element\n        raise IndexError(\"Stack is empty\")\n\n    def is_empty(self) -&gt; bool:\n        return len(self.stack) == 0\n    \n    def peek(self) -&gt; Any:\n        if not self.is_empty():\n            return self.stack[len(self.stack)-1]\n        raise IndexError(\"Stack is empty\")\n\n    def visualize(self) -&gt; None:\n        \"\"\"Visualize the stack vertically.\"\"\"\n        if self.is_empty():\n            print(\"Stack is empty\")\n            return\n            \n        plt.figure(figsize=(6, 8))\n        y_pos = np.arange(len(self.stack))\n        \n        plt.barh(y_pos, [1]*len(self.stack), align='center', color='lightblue')\n        \n        for i, item in enumerate(self.stack):\n            plt.text(0.5, i, str(item), ha='center', va='center')\n            \n        plt.yticks([])\n        plt.xticks([])\n        plt.title(\"Stack Visualization\")\n        plt.xlabel(\"Top of Stack \u2192\")\n        plt.gca().invert_yaxis()\n        plt.show()\n</pre> class Stack:     def __init__(self, para: List = None):         self.stack: List = para if para is not None else []      def push(self, newElement: Any) -&gt; None:         self.stack.append(newElement)      def pop(self) -&gt; Any:         if not self.is_empty():             last_element = self.stack[len(self.stack)-1]             self.stack.remove(last_element)             return last_element         raise IndexError(\"Stack is empty\")      def is_empty(self) -&gt; bool:         return len(self.stack) == 0          def peek(self) -&gt; Any:         if not self.is_empty():             return self.stack[len(self.stack)-1]         raise IndexError(\"Stack is empty\")      def visualize(self) -&gt; None:         \"\"\"Visualize the stack vertically.\"\"\"         if self.is_empty():             print(\"Stack is empty\")             return                      plt.figure(figsize=(6, 8))         y_pos = np.arange(len(self.stack))                  plt.barh(y_pos, [1]*len(self.stack), align='center', color='lightblue')                  for i, item in enumerate(self.stack):             plt.text(0.5, i, str(item), ha='center', va='center')                      plt.yticks([])         plt.xticks([])         plt.title(\"Stack Visualization\")         plt.xlabel(\"Top of Stack \u2192\")         plt.gca().invert_yaxis()         plt.show()"},{"location":"tree/","title":"Tree","text":"In\u00a0[\u00a0]: Copied! <pre>from typing import Any, Optional\nimport networkx as nx\nimport matplotlib.pyplot as plt\n</pre> from typing import Any, Optional import networkx as nx import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>class Node:\n    def __init__(self, data: Any):\n        self.data: Any = data\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n</pre> class Node:     def __init__(self, data: Any):         self.data: Any = data         self.left: Optional[Node] = None         self.right: Optional[Node] = None In\u00a0[\u00a0]: Copied! <pre>class BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if not self.root:\n            self.root = new_node\n            return\n        \n        current = self.root\n        while True:\n            if data &lt; current.data:\n                if current.left is None:\n                    current.left = new_node\n                    break\n                current = current.left\n            else:\n                if current.right is None:\n                    current.right = new_node\n                    break\n                current = current.right\n\n    def search(self, data):\n        current = self.root\n        while current:\n            if current.data == data:\n                return current\n            if data &lt; current.data:\n                current = current.left\n            else:\n                current = current.right\n        return None\n\n    def inorder_traversal(self):\n        if not self.root:\n            return\n        \n        stack = []\n        current = self.root\n        \n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                \n            current = stack.pop()\n            print(current.data, end=\" \")\n            current = current.right\n        print()\n\n    def visualize(self) -&gt; None:\n        \"\"\"Visualize the binary search tree.\"\"\"\n        G = nx.Graph()\n        \n        def add_nodes_edges(node: Node, pos_x: float, pos_y: float, positions: dict) -&gt; None:\n            if not node:\n                return\n                \n            G.add_node(id(node), value=node.data)\n            positions[id(node)] = (pos_x, pos_y)\n            \n            if node.left:\n                G.add_node(id(node.left), value=node.left.data)\n                G.add_edge(id(node), id(node.left))\n                add_nodes_edges(node.left, pos_x - 1, pos_y - 1, positions)\n                \n            if node.right:\n                G.add_node(id(node.right), value=node.right.data)\n                G.add_edge(id(node), id(node.right))\n                add_nodes_edges(node.right, pos_x + 1, pos_y - 1, positions)\n        \n        positions = {}\n        add_nodes_edges(self.root, 0, 0, positions)\n        \n        plt.figure(figsize=(10, 8))\n        nx.draw(G, positions, with_labels=True, node_color='lightgreen', \n                node_size=1500)\n        \n        labels = {node: f\"{G.nodes[node]['value']}\" for node in G.nodes()}\n        nx.draw_networkx_labels(G, positions, labels)\n        \n        plt.title(\"Binary Search Tree\")\n        plt.axis('equal')\n        plt.show()\n</pre> class BinarySearchTree:     def __init__(self):         self.root = None      def insert(self, data):         new_node = Node(data)         if not self.root:             self.root = new_node             return                  current = self.root         while True:             if data &lt; current.data:                 if current.left is None:                     current.left = new_node                     break                 current = current.left             else:                 if current.right is None:                     current.right = new_node                     break                 current = current.right      def search(self, data):         current = self.root         while current:             if current.data == data:                 return current             if data &lt; current.data:                 current = current.left             else:                 current = current.right         return None      def inorder_traversal(self):         if not self.root:             return                  stack = []         current = self.root                  while stack or current:             while current:                 stack.append(current)                 current = current.left                              current = stack.pop()             print(current.data, end=\" \")             current = current.right         print()      def visualize(self) -&gt; None:         \"\"\"Visualize the binary search tree.\"\"\"         G = nx.Graph()                  def add_nodes_edges(node: Node, pos_x: float, pos_y: float, positions: dict) -&gt; None:             if not node:                 return                              G.add_node(id(node), value=node.data)             positions[id(node)] = (pos_x, pos_y)                          if node.left:                 G.add_node(id(node.left), value=node.left.data)                 G.add_edge(id(node), id(node.left))                 add_nodes_edges(node.left, pos_x - 1, pos_y - 1, positions)                              if node.right:                 G.add_node(id(node.right), value=node.right.data)                 G.add_edge(id(node), id(node.right))                 add_nodes_edges(node.right, pos_x + 1, pos_y - 1, positions)                  positions = {}         add_nodes_edges(self.root, 0, 0, positions)                  plt.figure(figsize=(10, 8))         nx.draw(G, positions, with_labels=True, node_color='lightgreen',                  node_size=1500)                  labels = {node: f\"{G.nodes[node]['value']}\" for node in G.nodes()}         nx.draw_networkx_labels(G, positions, labels)                  plt.title(\"Binary Search Tree\")         plt.axis('equal')         plt.show()"},{"location":"examples/__init__/","title":"init","text":""},{"location":"examples/array_test/","title":"Array Data Structure Demo","text":"In\u00a0[\u00a0]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.array import Array  # Modification ici\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.array import Array  # Modification ici In\u00a0[\u00a0]: Copied! <pre>class ArrayDemo:\n    def __init__(self):\n        self.array = Array()\n    \n    def add_items(self, items):\n        print(\"Adding items:\")\n        for item in items:\n            self.array.insert(item)\n        self.array.display()\n    \n    def remove_item(self, index):\n        print(f\"\\nRemoving item at index {index}:\")\n        removed = self.array.delete(index)\n        print(f\"Removed: {removed}\")\n        self.array.display()\n    \n    def find_item(self, item):\n        print(f\"\\nSearching for {item}:\")\n        index = self.array.search(item)\n        print(f\"Found at index: {index}\")\n    \n    def get_item(self, index):\n        print(f\"\\nGetting item at index {index}:\")\n        item = self.array.get(index)\n        print(f\"Item: {item}\")\n    \n    def show_length(self):\n        print(f\"\\nArray length: {self.array.length()}\")\n</pre> class ArrayDemo:     def __init__(self):         self.array = Array()          def add_items(self, items):         print(\"Adding items:\")         for item in items:             self.array.insert(item)         self.array.display()          def remove_item(self, index):         print(f\"\\nRemoving item at index {index}:\")         removed = self.array.delete(index)         print(f\"Removed: {removed}\")         self.array.display()          def find_item(self, item):         print(f\"\\nSearching for {item}:\")         index = self.array.search(item)         print(f\"Found at index: {index}\")          def get_item(self, index):         print(f\"\\nGetting item at index {index}:\")         item = self.array.get(index)         print(f\"Item: {item}\")          def show_length(self):         print(f\"\\nArray length: {self.array.length()}\") In\u00a0[\u00a0]: Copied! <pre># Test all Array operations\ndemo = ArrayDemo()\n\n# Add items\ndemo.add_items([1, 2, 3, 4, 5])\n\n# Get length\ndemo.show_length()\n\n# Get item\ndemo.get_item(2)\n\n# Search item\ndemo.find_item(3)\n\n# Remove item\ndemo.remove_item(1)\n</pre> # Test all Array operations demo = ArrayDemo()  # Add items demo.add_items([1, 2, 3, 4, 5])  # Get length demo.show_length()  # Get item demo.get_item(2)  # Search item demo.find_item(3)  # Remove item demo.remove_item(1)"},{"location":"examples/array_test/#array-data-structure-demo","title":"Array Data Structure Demo\u00b6","text":""},{"location":"examples/array_visualization/","title":"Array Visualization Examples","text":"In\u00a0[2]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures import Array\nimport matplotlib.pyplot as plt\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures import Array import matplotlib.pyplot as plt <pre>\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[2], line 3\n      1 import sys\n      2 sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\n----&gt; 3 from data_structures import Array\n      4 import matplotlib.pyplot as plt\n\nImportError: cannot import name 'Array' from 'data_structures' (/Users/elhadjimamadou/Desktop/Projects/data_structures/data_structures/__init__.py)</pre> In\u00a0[\u00a0]: Copied! <pre># Create an empty array\narr = Array()\n\n# Initial state\nprint(\"Empty array:\")\narr.visualize()\n</pre> # Create an empty array arr = Array()  # Initial state print(\"Empty array:\") arr.visualize() In\u00a0[\u00a0]: Copied! <pre># Add some elements\nfor i in range(5):\n    arr.insert(i * 2)\n\nprint(\"Array after insertions:\")\narr.visualize()\n</pre> # Add some elements for i in range(5):     arr.insert(i * 2)  print(\"Array after insertions:\") arr.visualize() In\u00a0[\u00a0]: Copied! <pre># Delete an element\narr.delete(2)\n\nprint(\"Array after deletion:\")\narr.visualize()\n</pre> # Delete an element arr.delete(2)  print(\"Array after deletion:\") arr.visualize()"},{"location":"examples/array_visualization/#array-visualization-examples","title":"Array Visualization Examples\u00b6","text":"<p>This notebook demonstrates the visualization capabilities of our Array implementation.</p>"},{"location":"examples/linkedlist_test/","title":"LinkedList Demo","text":"In\u00a0[4]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.linkedlist import LinkedList\n\nclass Array:\n    def __init__(self):\n        self.array = []\n\n    def insert(self, item):\n        self.array.append(item)\n\n    def delete(self, index):\n        if 0 &lt;= index &lt; len(self.array):\n            return self.array.pop(index)\n        raise IndexError(\"Index out of range\")\n\n    def search(self, item):\n        for i in range(len(self.array)):\n            if self.array[i] == item:\n                return i\n        return -1\n\n\n    def get(self, index):\n        if 0 &lt;= index &lt; len(self.array):\n            return self.array[index]\n        raise IndexError(\"Index out of range\")\n\n    def length(self):\n        return len(self.array)\n\n    def display(self):\n        print(self.array)\nclass ListDemo:\n    def __init__(self):\n        self.list = LinkedList()\n    \n    def add_at_start(self, items):\n        print(\"\\nAdding at start:\")\n        for item in items:\n            self.list.insertAtBeginning(item)\n        self.list.traverse()\n    \n    def add_at_end(self, items):\n        print(\"\\nAdding at end:\")\n        for item in items:\n            self.list.insertAtEnd(item)\n        self.list.traverse()\n    \n    def add_after_index(self, item, index):\n        print(f\"\\nAdding {item} after index {index}:\")\n        self.list.insertAfter(item, index)\n        self.list.traverse()\n    \n    def remove_element(self, index):\n        print(f\"\\nRemoving element at index {index}:\")\n        try:\n            self.list.deleteItem(index)\n            self.list.traverse()\n        except AttributeError:\n            print(\"Cannot delete at this index\")\n    \n    def find_element(self, item):\n        return self.list.search(item)\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.linkedlist import LinkedList  class Array:     def __init__(self):         self.array = []      def insert(self, item):         self.array.append(item)      def delete(self, index):         if 0 &lt;= index &lt; len(self.array):             return self.array.pop(index)         raise IndexError(\"Index out of range\")      def search(self, item):         for i in range(len(self.array)):             if self.array[i] == item:                 return i         return -1       def get(self, index):         if 0 &lt;= index &lt; len(self.array):             return self.array[index]         raise IndexError(\"Index out of range\")      def length(self):         return len(self.array)      def display(self):         print(self.array) class ListDemo:     def __init__(self):         self.list = LinkedList()          def add_at_start(self, items):         print(\"\\nAdding at start:\")         for item in items:             self.list.insertAtBeginning(item)         self.list.traverse()          def add_at_end(self, items):         print(\"\\nAdding at end:\")         for item in items:             self.list.insertAtEnd(item)         self.list.traverse()          def add_after_index(self, item, index):         print(f\"\\nAdding {item} after index {index}:\")         self.list.insertAfter(item, index)         self.list.traverse()          def remove_element(self, index):         print(f\"\\nRemoving element at index {index}:\")         try:             self.list.deleteItem(index)             self.list.traverse()         except AttributeError:             print(\"Cannot delete at this index\")          def find_element(self, item):         return self.list.search(item) In\u00a0[\u00a0]: Copied! <pre># Test all LinkedList operations\ndemo = ListDemo()\n\n# Add at beginning\ndemo.add_at_start([1, 2, 3])\n\n# Add at end\ndemo.add_at_end([4, 5])\n\n# Add after index\ndemo.add_after_index(6, 2)\n\n# Remove element\ndemo.remove_element(2)  # Changed index to 2\n\n# Search element\nprint(f\"\\nIs 3 in list? {demo.find_element(3)}\")\n</pre> # Test all LinkedList operations demo = ListDemo()  # Add at beginning demo.add_at_start([1, 2, 3])  # Add at end demo.add_at_end([4, 5])  # Add after index demo.add_after_index(6, 2)  # Remove element demo.remove_element(2)  # Changed index to 2  # Search element print(f\"\\nIs 3 in list? {demo.find_element(3)}\")"},{"location":"examples/linkedlist_test/#linkedlist-demo","title":"LinkedList Demo\u00b6","text":""},{"location":"examples/linkedlist_visualization/","title":"Linked List Visualization","text":"In\u00a0[12]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures import LinkedList\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures import LinkedList In\u00a0[13]: Copied! <pre># Create a new linked list\nll = LinkedList()\n\n# Insert elements\nll.insertAtBeginning(1)\nll.insertAtEnd(3)\nll.insertAfter(2, 1)\n\nprint(\"Initial linked list:\")\nll.traverse()\nll.visualize()\n</pre> # Create a new linked list ll = LinkedList()  # Insert elements ll.insertAtBeginning(1) ll.insertAtEnd(3) ll.insertAfter(2, 1)  print(\"Initial linked list:\") ll.traverse() ll.visualize() <pre>Initial linked list:\n1 -&gt; 2 -&gt; 3 -&gt; None\n</pre> In\u00a0[14]: Copied! <pre># Insert more elements\nll.insertAtEnd(4)\nll.insertAtEnd(5)\n\nprint(\"After adding more elements:\")\nll.traverse()\nll.visualize()\n</pre> # Insert more elements ll.insertAtEnd(4) ll.insertAtEnd(5)  print(\"After adding more elements:\") ll.traverse() ll.visualize() <pre>After adding more elements:\n1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; None\n</pre> In\u00a0[15]: Copied! <pre># Delete item\nprint(\"Deleting node at index 1:\")\nll.deleteItem(1)\nll.traverse()\nll.visualize()\n</pre> # Delete item print(\"Deleting node at index 1:\") ll.deleteItem(1) ll.traverse() ll.visualize() <pre>Deleting node at index 1:\n</pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[15], line 3\n      1 # Delete item\n      2 print(\"Deleting node at index 1:\")\n----&gt; 3 ll.deleteItem(1)\n      4 ll.traverse()\n      5 ll.visualize()\n\nFile ~/Desktop/Projects/data_structures/data_structures/linkedlist.py:75, in LinkedList.deleteItem(self, index)\n     72     print('Index out of range')\n     73     return\n---&gt; 75 prev.next = curr_node.next\n     76 curr_node = None\n\nAttributeError: 'NoneType' object has no attribute 'next' and no __dict__ for setting new attributes</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/linkedlist_visualization/#linked-list-visualization","title":"Linked List Visualization\u00b6","text":"<p>This notebook demonstrates the visualization of Linked List operations.</p>"},{"location":"examples/queue_test/","title":"Queue Test","text":"In\u00a0[3]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.queue import Queue\n\nclass QueueDemo:\n    def __init__(self):\n        self.queue = Queue()\n    \n    def add_items(self, items):\n        print(\"Adding items to queue:\")\n        for item in items:\n            self.queue.enqueue(item)\n            print(f\"Added: {item}\")\n    \n    def remove_item(self):\n        print(\"\\nRemoving front item:\")\n        try:\n            item = self.queue.dequeue()\n            print(f\"Removed: {item}\")\n        except IndexError as e:\n            print(f\"Error: {e}\")\n    \n    def check_front(self):\n        print(\"\\nChecking front item:\")\n        try:\n            item = self.queue.peek()\n            print(f\"Front item: {item}\")\n        except IndexError as e:\n            print(f\"Error: {e}\")\n    \n    def check_empty(self):\n        print(\"\\nChecking if queue is empty:\")\n        print(f\"Empty: {self.queue.isEmpty()}\")\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.queue import Queue  class QueueDemo:     def __init__(self):         self.queue = Queue()          def add_items(self, items):         print(\"Adding items to queue:\")         for item in items:             self.queue.enqueue(item)             print(f\"Added: {item}\")          def remove_item(self):         print(\"\\nRemoving front item:\")         try:             item = self.queue.dequeue()             print(f\"Removed: {item}\")         except IndexError as e:             print(f\"Error: {e}\")          def check_front(self):         print(\"\\nChecking front item:\")         try:             item = self.queue.peek()             print(f\"Front item: {item}\")         except IndexError as e:             print(f\"Error: {e}\")          def check_empty(self):         print(\"\\nChecking if queue is empty:\")         print(f\"Empty: {self.queue.isEmpty()}\") In\u00a0[2]: Copied! <pre># Test all Queue operations\ndemo = QueueDemo()\n\n# Check if empty initially\ndemo.check_empty()\n\n# Add items\ndemo.add_items([1, 2, 3])\n\n# Check front item\ndemo.check_front()\n\n# Remove item\ndemo.remove_item()\n\n# Check if empty after operations\ndemo.check_empty()\n</pre> # Test all Queue operations demo = QueueDemo()  # Check if empty initially demo.check_empty()  # Add items demo.add_items([1, 2, 3])  # Check front item demo.check_front()  # Remove item demo.remove_item()  # Check if empty after operations demo.check_empty() <pre>\nChecking if queue is empty:\n</pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[2], line 5\n      2 demo = QueueDemo()\n      4 # Check if empty initially\n----&gt; 5 demo.check_empty()\n      7 # Add items\n      8 demo.add_items([1, 2, 3])\n\nCell In[1], line 33, in QueueDemo.check_empty(self)\n     31 def check_empty(self):\n     32     print(\"\\nChecking if queue is empty:\")\n---&gt; 33     print(f\"Empty: {self.queue.isEmpty()}\")\n\nAttributeError: 'Queue' object has no attribute 'isEmpty'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/queue_visualization/","title":"Queue Visualization","text":"In\u00a0[6]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\n\nfrom queue import Queue\n\n# Create and populate queue\nq = Queue()\nfor i in range(1, 6):\n    q.enqueue(i)\n\n# Show initial state\nprint(\"Initial queue:\")\nq.visualize()\n\n# Remove an element\nq.dequeue()\nprint(\"\\nAfter dequeue:\")\nq.visualize()\n\n# Add new element\nq.enqueue(6)\nprint(\"\\nAfter enqueue:\")\nq.visualize()\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')  from queue import Queue  # Create and populate queue q = Queue() for i in range(1, 6):     q.enqueue(i)  # Show initial state print(\"Initial queue:\") q.visualize()  # Remove an element q.dequeue() print(\"\\nAfter dequeue:\") q.visualize()  # Add new element q.enqueue(6) print(\"\\nAfter enqueue:\") q.visualize() <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 9\n      7 q = Queue()\n      8 for i in range(1, 6):\n----&gt; 9     q.enqueue(i)\n     11 # Show initial state\n     12 print(\"Initial queue:\")\n\nAttributeError: 'Queue' object has no attribute 'enqueue'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/stack_test/","title":"Stack Data Structure Demo","text":"In\u00a0[\u00a0]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.stack import Stack\n\nclass StackDemo:\n    def __init__(self):\n        self.stack = Stack()\n    \n    def add_items(self, items):\n        print(\"Adding items to stack:\")\n        for item in items:\n            self.stack.push(item)\n            print(f\"Pushed: {item}\")\n    \n    def remove_top(self):\n        print(\"\\nRemoving top item:\")\n        top = self.stack.peek()\n        self.stack.pop()\n        print(f\"Removed: {top}\")\n    \n    def check_top(self):\n        print(\"\\nChecking top item:\")\n        print(f\"Top item: {self.stack.peek()}\")\n    \n    def check_empty(self):\n        print(\"\\nChecking if stack is empty:\")\n        print(f\"Empty: {self.stack.is_empty()}\")\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.stack import Stack  class StackDemo:     def __init__(self):         self.stack = Stack()          def add_items(self, items):         print(\"Adding items to stack:\")         for item in items:             self.stack.push(item)             print(f\"Pushed: {item}\")          def remove_top(self):         print(\"\\nRemoving top item:\")         top = self.stack.peek()         self.stack.pop()         print(f\"Removed: {top}\")          def check_top(self):         print(\"\\nChecking top item:\")         print(f\"Top item: {self.stack.peek()}\")          def check_empty(self):         print(\"\\nChecking if stack is empty:\")         print(f\"Empty: {self.stack.is_empty()}\") In\u00a0[\u00a0]: Copied! <pre># Test all Stack operations\ndemo = StackDemo()\n\n# Check if empty initially\ndemo.check_empty()\n\n# Add items\ndemo.add_items([1, 2, 3])\n\n# Check top item\ndemo.check_top()\n\n# Remove item\ndemo.remove_top()\n\n# Check if empty after operations\ndemo.check_empty()\n</pre> # Test all Stack operations demo = StackDemo()  # Check if empty initially demo.check_empty()  # Add items demo.add_items([1, 2, 3])  # Check top item demo.check_top()  # Remove item demo.remove_top()  # Check if empty after operations demo.check_empty()"},{"location":"examples/stack_test/#stack-data-structure-demo","title":"Stack Data Structure Demo\u00b6","text":""},{"location":"examples/stack_visualization/","title":"Stack Data Structure Visualization","text":"In\u00a0[1]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.stack import Stack\n\n# Create stack\ns = Stack()\n\n# Push elements\nprint(\"Pushing elements 1-4:\")\nfor i in range(1, 5):\n    s.push(i)\n    s.visualize()\n\n# Pop element\nprint(\"\\nPopping top element:\")\ns.pop()\ns.visualize()\n\n# Show top element\nprint(f\"\\nTop element: {s.peek()}\")\ns.visualize()\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.stack import Stack  # Create stack s = Stack()  # Push elements print(\"Pushing elements 1-4:\") for i in range(1, 5):     s.push(i)     s.visualize()  # Pop element print(\"\\nPopping top element:\") s.pop() s.visualize()  # Show top element print(f\"\\nTop element: {s.peek()}\") s.visualize() <pre>Pushing elements 1-4:\n</pre> <pre>\nPopping top element:\n</pre> <pre>\nTop element: 3\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/stack_visualization/#stack-data-structure-visualization","title":"Stack Data Structure Visualization\u00b6","text":"<p>Demonstrates Stack operations with vertical visualization.</p>"},{"location":"examples/tree_test/","title":"Binary Search Tree Demo","text":"In\u00a0[\u00a0]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.tree import BinarySearchTree\n\nclass TreeDemo:\n    def __init__(self):\n        self.tree = BinarySearchTree()\n    \n    def build_tree(self, items):\n        print(\"Building tree with:\", items)\n        for item in items:\n            self.tree.insert(item)\n        print(\"Tree built. Inorder traversal:\")\n        self.tree.inorder_traversal()\n    \n    def find_value(self, value):\n        print(f\"\\nSearching for {value}:\")\n        result = self.tree.search(value)\n        print(f\"Found: {result.data if result else 'Not found'}\")\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.tree import BinarySearchTree  class TreeDemo:     def __init__(self):         self.tree = BinarySearchTree()          def build_tree(self, items):         print(\"Building tree with:\", items)         for item in items:             self.tree.insert(item)         print(\"Tree built. Inorder traversal:\")         self.tree.inorder_traversal()          def find_value(self, value):         print(f\"\\nSearching for {value}:\")         result = self.tree.search(value)         print(f\"Found: {result.data if result else 'Not found'}\") In\u00a0[\u00a0]: Copied! <pre># Test all BST operations\ndemo = TreeDemo()\n\n# Insert values and show tree\ndemo.build_tree([5, 3, 7, 1, 9, 4])\n\n# Search for values\ndemo.find_value(4)\ndemo.find_value(8)\n</pre> # Test all BST operations demo = TreeDemo()  # Insert values and show tree demo.build_tree([5, 3, 7, 1, 9, 4])  # Search for values demo.find_value(4) demo.find_value(8)"},{"location":"examples/tree_test/#binary-search-tree-demo","title":"Binary Search Tree Demo\u00b6","text":""},{"location":"examples/tree_visualization/","title":"Binary Search Tree Visualization","text":"In\u00a0[1]: Copied! <pre>import sys\nsys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures')\nfrom data_structures.tree import BinarySearchTree\n\n# Create BST\nbst = BinarySearchTree()\n\n# Insert elements\nelements = [5, 3, 7, 2, 4, 6, 8]\nprint(\"Building tree:\")\nfor e in elements:\n    bst.insert(e)\n    print(f\"\\nAfter inserting {e}:\")\n    bst.visualize()\n\n# Search\nsearch_value = 4\nresult = bst.search(search_value)\nprint(f\"\\nSearching for {search_value}: {'Found' if result else 'Not found'}\")\nbst.visualize()\n</pre> import sys sys.path.append('/Users/elhadjimamadou/Desktop/Projects/data_structures') from data_structures.tree import BinarySearchTree  # Create BST bst = BinarySearchTree()  # Insert elements elements = [5, 3, 7, 2, 4, 6, 8] print(\"Building tree:\") for e in elements:     bst.insert(e)     print(f\"\\nAfter inserting {e}:\")     bst.visualize()  # Search search_value = 4 result = bst.search(search_value) print(f\"\\nSearching for {search_value}: {'Found' if result else 'Not found'}\") bst.visualize() <pre>Building tree:\n\nAfter inserting 5:\n</pre> <pre>\nAfter inserting 3:\n</pre> <pre>\nAfter inserting 7:\n</pre> <pre>\nAfter inserting 2:\n</pre> <pre>\nAfter inserting 4:\n</pre> <pre>\nAfter inserting 6:\n</pre> <pre>\nAfter inserting 8:\n</pre> <pre>\nSearching for 4: Found\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/tree_visualization/#binary-search-tree-visualization","title":"Binary Search Tree Visualization\u00b6","text":"<p>Demonstrates BST operations with tree layout visualization.</p>"}]}